<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<script type="text/javascript" src="js/reactjs_0.13.0/JSXTransformer.js"></script>
<script type="text/javascript" src="js/reactjs_0.13.0/react.js"></script>
<script type="text/javascript" src="js/jquery_1.8.2/jquery.min.js"></script>
<script type="text/javascript" src="js/easystogu/requestForecastData.js"></script>
<script type="text/javascript" src="js/easystogu/requestStockData.js"></script>
<script type="text/javascript" src="js/easystogu/common.js"></script>
<script type="text/javascript" src="js/easystogu/createChart.js"></script>
<script type="text/javascript" src="js/3pp/moment.min.js"></script>
<style type="text/css">
${demo.css}
</style>
</head>
<body>
	<script type="text/jsx">    
          var stockId = "999999";
          var indicator = "luzao";
          var dateFrom = moment().subtract(2000, 'days').format("YYYY-MM-DD");
          var dateTo = moment().format("YYYY-MM-DD");
          var selectDate = dateTo;
          var selectStockIds = [];
          var version = "v1";
          var viewName = "luzao_phaseII_ddx_2_of_5_days_bigger_05";
          var cixin = "False";

	      var reqParms = {
		        "trendModeName" : "None",
                "nDays" : "1",
                "repeatTimes" : "1"
	      };
  
	      var ParmForm = React.createClass({
	         getInitialState: function() {
	         return {
	            stockId: "999999",
	            indicator: "luzao",
                version: "v1",
	            dateFrom: moment().subtract(2000, 'days').format("YYYY-MM-DD"),
	            dateTo: moment().format("YYYY-MM-DD"),
                selectDate: "",
                viewName: "",
                viewOptions: [],
                dateOptions: [],
                stockIdOptions: []
	        };
	      },
	      
	      handleChangeSelectDate: function(e) {
	         var newState = {};
	         newState[e.target.name] = e.target.value;
	         this.setState(newState);

             selectDate = e.target.value;

             //update stockIds based on selectDate
             $.ajaxSettings.async = false;
             selectStockIds = getAllStockIdsFromView(this.state.viewName+"?date="+selectDate+"&cixin="+cixin);
             $.ajaxSettings.async = true;
             this.state.stockIdOptions = [];
             for (var i = 0; i < selectStockIds.length; i++) {
                 this.state.stockIdOptions.push(
                 <option value={selectStockIds[i][0]}>{selectStockIds[i][0]}{selectStockIds[i][1]}</option>
                );
             }
             //set the selected stockId to first one
             if(selectStockIds.length > 0){
                stockId = selectStockIds[0][0];
                newState["stockId"] = stockId;
	            this.setState(newState);
                //refresh the chart using the first stockid
                if(indicator == "shenxian"){ 
	               loadShenXian(version, stockId, dateFrom, dateTo);
                }else if(indicator == "shenxian_sell"){ 
	               loadShenXianSellWithReqParms(stockId, dateFrom, dateTo, reqParms);
                }else if(indicator == "luzao"){ 
	               loadLuZao(version, stockId, dateFrom, dateTo);
                }else if(indicator == "boll"){ 
	               loadBoll(version, stockId, dateFrom, dateTo);
                }else if(indicator == "macd"){ 
	               loadMacd(version, stockId, dateFrom, dateTo);
                }else if(indicator == "qsdd"){ 
	               loadQSDD(version, stockId, dateFrom, dateTo);
                }
             }
	      },

          handleChangeSelectStockId: function(e) {
	         var newState = {};
	         newState[e.target.name] = e.target.value;
	         this.setState(newState);
        
             //update the stockId to selected value
             stockId = e.target.value;

             if(indicator == "shenxian"){ 
	            loadShenXian(version, stockId, dateFrom, dateTo);
             }else if(indicator == "shenxian_sell"){ 
	            loadShenXianSellWithReqParms(stockId, dateFrom, dateTo, reqParms);
             }else if(indicator == "luzao"){ 
	            loadLuZao(version, stockId, dateFrom, dateTo);
             }else if(indicator == "boll"){ 
	            loadBoll(version, stockId, dateFrom, dateTo);
             }else if(indicator == "macd"){ 
	            loadMacd(version, stockId, dateFrom, dateTo);
             }else if(indicator == "qsdd"){ 
	            loadQSDD(version, stockId, dateFrom, dateTo);
             }
	      },

          handleChangeSelectIndicator: function(e) {
	         var newState = {};
	         newState[e.target.name] = e.target.value;
	         this.setState(newState);
        
             //update the indicator to selected value
             indicator = e.target.value;

             if(indicator == "shenxian"){ 
	            loadShenXian(version, stockId, dateFrom, dateTo);
             }else if(indicator == "shenxian_sell"){ 
	            loadShenXianSellWithReqParms(stockId, dateFrom, dateTo, reqParms);
             }else if(indicator == "luzao"){ 
	            loadLuZao(version, stockId, dateFrom, dateTo);
             }else if(indicator == "boll"){ 
	            loadBoll(version, stockId, dateFrom, dateTo);
             }else if(indicator == "macd"){ 
	            loadMacd(version, stockId, dateFrom, dateTo);
             }else if(indicator == "qsdd"){ 
	            loadQSDD(version, stockId, dateFrom, dateTo);
             }
	      },

          handleChangeVersion: function(e) {
	         var newState = {};
	         newState[e.target.name] = e.target.value;
	         this.setState(newState);
        
             //update the indicator to selected value
             version = e.target.value;
	      },
	
	      handleSubmit: function() {
	         var data = {
	            stockId : this.state.stockId,
	            indicator : this.state.indicator,
                version: this.state.version, 
	            dateFrom : this.state.dateFrom,
	            dateTo : this.state.dateTo,
	        };
	        
            indicator = data.indicator;
            dateFrom = data.dateFrom;
            dateTo = data.dateTo;
            stockId = data.stockId;
	        
            if(data.indicator == "shenxian"){ 
	           loadShenXian(data.version, stockId, data.dateFrom, data.dateTo);
            }else if(data.indicator == "shenxian_sell"){ 
	           loadShenXianSellWithReqParms(stockId, data.dateFrom, data.dateTo, reqParms);
            }else if(data.indicator == "luzao"){ 
	           loadLuZao(data.version, stockId, data.dateFrom, data.dateTo);
            }else if(data.indicator == "boll"){ 
	           loadBoll(data.version, stockId, data.dateFrom, data.dateTo);
            }else if(data.indicator == "macd"){ 
	           loadMacd(data.version, stockId, data.dateFrom, data.dateTo);
            }else if(data.indicator == "qsdd"){ 
	           loadQSDD(data.version, stockId, data.dateFrom, data.dateTo);
            }
	      },

          componentDidMount: function () {
            var newState = {};

            $.ajaxSettings.async = false;
            var dateOptionsTmp = getLatestNDate(20);
            //first option is empty
            tmpDateOptions = [];

            for (var i = 0; i < dateOptionsTmp.length; i++) {
                  tmpDateOptions.push(
                  <option value={dateOptionsTmp[i]}>{dateOptionsTmp[i]}</option>
                  );
            }

            tmpDateOptions.push(<option value='Latest_20'>Latest_20</option>);

	        newState["dateOptions"] = tmpDateOptions;
            
            viewName = getQueryString("selectView");

            newState["viewName"] = viewName;

            cixin = getQueryString("cixin");
            selectStockIds = getAllStockIdsFromView(viewName+"?date="+dateOptionsTmp[0]+"&cixin="+cixin);
            $.ajaxSettings.async = true;

            //update stockIds based on viewName
             tmpStockIdOptions = [];
             for (var i = 0; i < selectStockIds.length; i++) {
                 tmpStockIdOptions.push(
                 <option value={selectStockIds[i][0]}>{selectStockIds[i][0]}{selectStockIds[i][1]}</option>
                );
             }

             newState["stockIdOptions"] = tmpStockIdOptions;

             //set the selected stockId to first one
             if(selectStockIds.length > 0){
                stockId = selectStockIds[0][0];
                newState["stockId"] = stockId;

                loadLuZao(version, stockId, dateFrom, dateTo);
             }

	         this.setState(newState);
          },
	      
	      render: function(){

			      return (<div>
			                  <select name='selectDate' onChange={this.handleChangeSelectDate}>
                              {this.state.dateOptions}
                              </select>&nbsp;&nbsp;

			                  <select name='stockId' onChange={this.handleChangeSelectStockId}>
                              {this.state.stockIdOptions}
                              </select>&nbsp;&nbsp;
			                  
			                  <select name='indicator' onChange={this.handleChangeSelectIndicator}>
                              <option value='luzao' defaultValue>luzao</option>
                              <option value='shenxian'>shenxian</option>
                              <option value='shenxian_sell'>shenxian_sell</option>
                              <option value='macd'>macd</option>
                              <option value='boll'>boll</option>
                              <option value='qsdd'>qsdd</option>
                              </select>&nbsp;&nbsp;
			                  
                              <input type="submit" value="Submit" onClick={this.handleSubmit} />
			              </div>
			              );
			     }         
	      });
	      
	      React.render(<ParmForm />,
	      document.getElementById("containerForm")
	      );
      </script>

	<script type="text/javascript" src="js/highstock_4.2.1/highstock.js"></script>
	<script type="text/javascript"
		src="js/highstock_4.2.1/modules/exporting.js"></script>
	<div>
		<div id="containerForm"></div>
		<div id="container" style="height: 100%; min-width: 100%; position:fixed;"></div>
	</div>
</body>
</html>